#
# This file is part of the GROMACS molecular simulation package.
#
# Copyright 2020- The GROMACS Authors
# and the project initiators Erik Lindahl, Berk Hess and David van der Spoel.
# Consult the AUTHORS/COPYING files and https://www.gromacs.org for details.
#
# GROMACS is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License
# as published by the Free Software Foundation; either version 2.1
# of the License, or (at your option) any later version.
#
# GROMACS is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with GROMACS; if not, see
# https://www.gnu.org/licenses, or write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA.
#
# If you want to redistribute modifications to GROMACS, please
# consider that scientific software is very special. Version
# control is crucial - bugs must be traceable. We will be happy to
# consider code for inclusion in the official distribution, but
# derived work must not be called official GROMACS. Details are found
# in the README & COPYING files - if they are missing, get the
# official version at https://www.gromacs.org.
#
# To help us fund GROMACS development, we humbly ask that you cite
# the research papers on the package. Check out https://www.gromacs.org.

# \author Victor Holanda <victor.holanda@cscs.ch>
# \author Joe Jordan <ejjordan@kth.se>
# \author Prashanth Kanduri <kanduri@cscs.ch>
# \author Sebastian Keller <keller@cscs.ch>
#

set(argon "argon-forces-integration")
add_executable(${argon} argon-forces-integration.cpp)

target_link_libraries(${argon} PRIVATE nblib)

set(methane "methane-water-integration")
add_executable(${methane} methane-water-integration.cpp)

target_link_libraries(${methane} PRIVATE nblib)

set(benchmark_cpu "benchmark_cpu")
add_executable(${benchmark_cpu} benchmark_cpu.cpp)

target_link_libraries(${benchmark_cpu} PRIVATE nblib)

if (GMX_GPU_CUDA)
    add_executable(benchmark_gpu_host benchmark_gpu_host.cpp)
    target_link_libraries(benchmark_gpu_host PRIVATE
      libgromacs
      common
      legacy_api
      legacy_modules
      nblib
      utility
      )
    set(benchmark_gpu "benchmark_gpu")
    add_executable(${benchmark_gpu} benchmark_gpu.cpp)
    target_link_libraries(${benchmark_gpu} PRIVATE
      libgromacs
      common
      legacy_api
      legacy_modules
      nblib
      utility
      )

    if(${CMAKE_VERSION} VERSION_LESS "3.17.0")
        find_package(CUDA)
        target_include_directories(${benchmark_gpu} PRIVATE "${CUDA_INCLUDE_DIRS}")
    else()
        find_package(CUDAToolkit)
        target_link_libraries(${benchmark_gpu} PRIVATE CUDA::cudart)
        target_link_libraries(benchmark_gpu_host PRIVATE CUDA::cudart)
    endif()
endif()

if(BUILD_TESTING)
    add_test(NAME NbLibSamplesTestArgon COMMAND ${argon})
    add_test(NAME NbLibSamplesTestMethaneWater COMMAND ${methane})
    add_dependencies(nblib-tests ${argon} ${methane})
endif()
